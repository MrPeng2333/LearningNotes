区间DP以及区间DP的优化？	《算法 - 动态规划 - 区间DP》	<ol><li>区间DP常见的状态转移方程`dp[i][j]=min(dp[i][j], dp[i][k]+dp[k+1][j]+w[i][j])`</li><li>`dp[i][j]`表示从`i`状态到`j`状态的最小花费。题目一般是求`dp[1][n]`</li><li>`dp[i][k]+dp[k+1][j]`体现了递推关系。`k`在`i`到`j`之间滑动，`k`有一个最优值，使得`dp[i][j]`最小</li><li>`w[i][j]`的性质很重要。`w[i][j]`是和题目有关的费用，如果它满足四边形不等式和单调性，那么用DP计算dp的时候，就能进行四边形不等式优化</li><img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211113161131.png" /><li>上图的时间复杂度为`O(n^3)`，只需要一个简单的优化操作，就能把复杂度优化为`O(n^2)`。这个操作就是就是把循环`i≤k<j`改为`s[i][j-1]≤k≤s[i+1][j]`，其中`s[i][j]`记录从`i`到`j`的最优分割点，这个优化被称为四边形不等式优化，下面是优化后的代码</li><img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211113163834.png" /></ol>	
什么是平行四边形优化原理（四边形不等式定理）？	《算法 - 动态规划 - 区间DP》	<ol><li>四边形不等式定理：如果 `w(i,j)`满足四边形不等式和单调性，则用DP计算`dp[][]`的时间复杂度是`O(n^2)`，这个定理通过下面两个引理来证明</li><li>引理1：状态转移方程`dp[i][j]=min(dp[i][k]+dp[k+1][j]+w[i][j])`，如果`w[i][j]`满足四边形不等式和单调性，那么`dp[i][j]`也满足四边形不等式</li><li>引理2：记`s[i][j]=k`是`dp[i][j]`取得最优值时的k，如果`dp`满足四边形不等式，那么`s[i][j-1]≤s[i][j]≤s[i+1][j]`，即`s[i][j-1]≤k≤s[i+1][j]`</li></ol>	参考文章：[1]https://blog.csdn.net/weixin_43914593/article/details/105150937；<br>[2]https://cse.hkust.edu.hk/mjg_lib/bibs/DPSu/DPSu.Files/p429-yao.pdf<br>
什么是区间包含的单调性？	《算法 - 动态规划 - 区间DP》	如果对于 a  ≤ b  ≤ c  ≤ d，有cost(b, c)  ≤ cost(a, d)，那么说明函数cost具有区间包含的单调性	
什么是四边形不等式？	《算法 - 动态规划 - 区间DP》	<ol><li>如果对于a  ≤ b  ≤ c  ≤ d，有cost(a, c) + cost(b, d) ≤ cost(b, c) + cost(a, d)，我们称函数cost满足四边形不等式</li><li>证明：设函数cost定义为（也可以定义为区间和）cost(i, j) = n_i × n\_(i + 1) × ... × n_j，其中n ≥ 0</li><li>设x = n_a × n\_(a+1) × ... × n\_(b-1)，y = n_b × n\_(b + 1) × ... × n_c，z = n_(c + 1) × n\_(c + 2) × ... n_d。则cost(a, c) + cost(b, d) ≤ cost(b, c) + cost(a, d)写为xy + yz ≤ y + xyz</li><li>化简为y(x + z) ≤ y(1 + xz) => 0 ≤ y[(1 + xz) - (x + z)] => 0 ≤ y[1 + x(z - 1) - z] => 0 ≤ y[x(z - 1) - (z - 1)] => 0 ≤ y(x - 1)(z - 1)</li></ol>	
Σ 区间DP	《算法 - 动态规划》	<ol><li>区间DP以及区间DP的优化？</li><li>什么是平行四边形优化原理（四边形不等式定理）？</li><li>什么是区间包含的单调性？</li><li>什么是四边形不等式？</li></ol>	
什么是树形DP？	《算法 - 动态规划 - 树形DP》	树形DP是指在“树”这种数据结构上进行的DP：给出一棵树，要求以最少的代价（或取得最大收益）完成给定的操作	
Σ 树形DP	《算法 - 动态规划》	什么是树形DP？	
什么是数位DP？	《算法 - 动态规划 - 数位DP》	<ol><li>数位DP是指对数字的“位”进行的与计数有关的DP。一个数有个位、十位、百位、千位等，数的每一位就是数位。数位DP用来解决与数字操作有关的问题，例如数位之和问题、特定数字问题等。</li><li>这些问题的特征是给定的区间超级大，不能用暴力的方法逐个检查，必须用接近O(log[2]n)复杂度的算法。</li><li>解题的思路是用DP对“数位”进行操作，记录已经算过的区间的状态，用在后续的计算中，快速进行大范围的筛选</li></ol>	
Σ 数位DP	《算法 - 动态规划》	什么是数位DP？	
什么是状态DP？	《算法 - 动态规划 - 状态压缩DP》	状态压缩DP是处理复杂集合问题的DP，集合的状态有很多，操作复杂，往往把方案用二进制数（“压缩”到这个二进制数中）来表示和操作。二进制操作有或、与、取反、移位等	
Σ 状态压缩DP	《算法 - 动态规划》	什么是状态DP？	
Σ 动态规划	《算法 - 动态规划》	<ol><li>区间DP</li><li>树形DP</li><li>数位DP</li><li>状态压缩DP</li></ol>	
万进制求n!？	《算法 - 数学 - 高精度计算》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211122105456.png" />	
Σ 高精度计算	《算法 - 数学》	万进制求n!？	
取模操作满足的性质？	《算法 - 数学 - 数论》	<ol><li>加：(a + b) mod m = ((a mod m) + (b mod m)) mod m</li><li>减：(a - b) mod m = ((a mod m) - (b mod m)) mod m</li><li>乘：(a × b) mod m = ((a mod m) × (b mod m)) mod m</li></ol>	
快速幂原理？	《算法 - 数学 - 数论》	对与幂运算a^n即n个a相乘，先算a^2，然后继续算(a^2)^2，一直算到n次幂。这是分治法的思想，复杂度为O(log[2]n)	
快速幂代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211123135515.png" />	
矩阵快速幂代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211123140925.png" />	
求最大公约数代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211125195315.png" />	
求最小公倍数代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211125195624.png" />	
方程ax + by = n（a、b、n是整数）什么时候有整数解？	《算法 - 数学 - 数论》	令a = gcd(a, b)a'、b = gcd(a, b)b'，有ax + by = gcd(a, b)(a'x + b'y) = n；如果x、y、a'、b'都是整数，那么n必须是gcd(a, b)的倍数才有整数解	
方程ax + by = n（a、b、n是整数）的通解（已知方程的一个解(x0, y0)）？	《算法 - 数学 - 数论》	<ol><li>x = x0 + (b / gcd(a, b))t</li><li>y = y0 - (a / gcd(a, b))t, t是任意整数</li></ol>	
扩展欧几里得解决的问题？	《算法 - 数学 - 数论》	求方程ax + by = gcd(a, b)的一个整数解（x0, y0）	
扩展欧几里得求解过程？	《算法 - 数学 - 数论》	<ol><li>ax + by = gcd(a, b)</li><li>bx1 + (a % b)y1 = gcd(a, b)</li><li>bx1 + (a - a / b * b)y1 = gcd(a, b)</li><li>bx1 + ay1 - (a / b * b) y1 = gcd(a, b)</li><li>ay1 + b(x1 - a / b * y1) = gcd(a, b)</li><li>由第一个和最后一个推导出x = y1; y = x1 - a / b * y1</li><li>这样推导到最后一层，得到gcd(a, b) * 1 = gcd(a, b)即此状态下的a = gcd(a, b), b = 0, x = 1, y = 0</li><li>再从最后一层推回第一层即可得到方程ax + by = gcd(a, b)的解</li></ol>	
扩展欧几里得代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211125210221.png" />	
求方程ax + by = n 的一个整数解的求解过程？	《算法 - 数学 - 数论》	<ol><li>判断方程ax + by = n 是否有整数解，有解的条件是gcd(a, b)可以整除n</li><li>用扩展欧几里得算法求ax + by = gcd(a, b)的一个解(x0, y0)</li><li>在ax0 + by0 = gcd(a, b)两边同时乘以n / gcd(a, b) 得：ax0n/gcd(a, b) + by0n/gcd(a, b) = n</li><li>即原方程的一个整数解为(x0n/gcd(a, b), y0n/gcd(a, b))</li></ol>	
同余的概念？	《算法 - 数学 - 数论》	<ol><li>a mod m = b mod m，称a和b对于m同余，m称为同余的模</li><li>同余的概念也可以理解为m | (a-b)，即a-b是m的整数倍</li><li>同余的符号记为a ≡ b(mod m)</li></ol>	
一元线性同余方程的概念？	《算法 - 数学 - 数论》	ax ≡ b (mod m)， a、b、m都是整数，求解x的值	
一元线性同余方程ax ≡ b (mod m)的求解思路？	《算法 - 数学 - 数论》	<ol><li>由方程可知 ax - b 是 m 的倍数，设 y 是倍数，则 ax - b = my，移项得ax - my = b，因为y可以是负数，方程改写为ax + my = b</li><li>此时使用基于扩展欧几里得的方法求解出方程解</li></ol>	
逆元的概念？	《算法 - 数学 - 数论》	方程ax ≡ 1 (mod m)的一个解x，称x为a模m的逆，这样的x有很多，把他们都称为逆	
求解逆元的思路？	《算法 - 数学 - 数论》	<ol><li>根据一元线性同余方程求解的讨论，可知方程ax ≡ 1 (mod m)有解的条件是gcd(a, m) = 1，即a、m互素</li><li>方程ax ≡ 1 (mod m)的求解等价于求解ax + my = 1， 可使用扩展欧几里得算法求解</li></ol>	
求逆元的代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211127155053.png" />	
逆元在除法取模中的应用？	《算法 - 数学 - 数论》	<ol><li>在除法取模中应用逆元，可以使除法取模避开除法计算，推导过程如下：</li><li>设k为b模m的逆，有： (a/b) mod m = ((a/b) mod m) ((bk) mod m) = ((a/b)bk) mod m = (ak) mod m</li><li>上述推导把除法的模运算转换成了乘法的模运算：(a/b) mod m = (ak) mod m</li></ol>	
逆元在一元线性同余方程求解中的应用？	《算法 - 数学 - 数论》	<ol><li>在一元线性同余方程求解中应用逆元，可以求解形如ax ≡ b (mod m)的任何同余方程，方法如下：</li><li>令a'是a模m的逆，则a'a ≡ 1 (mod m)；在ax ≡ b (mod m)的两边同时乘以a'，得到a'ax ≡ a'b(mod m)，所以x ≡ a'b(mod m)</li></ol>	
逆元在求解二元一次方程中的应用？	《算法 - 数学 - 数论》	<ol><li>求解方程ax + my = b，同余方程是ax ≡ b(mod m)</li><li>有解的条件：gcd(a, m)能整除b</li><li>求ax ≡ 1(mod m)的逆元a'，等价于用扩展欧几里得算法求解ax + my = 1</li><li>一个特解是x = a'b</li><li>代入方程ax + my = b，求解y</li></ol>	
试除法判断素数的概念？	《算法 - 数学 - 数论》	<ol><li>给定n，如果他不能整除[2, sqrt(n)]内的所有数，它就是素数。证明如下：</li><li>设n = a × b，有min(a, b) <= sqrt(n)，令a ≤ b。只要检查[2, sqrt(n)]内的数，如果n不是素数，就能找到一个a。如果不存在这个a，那么(sqrt(n), n - 1]内也不存在b</li><li>以上判断的范围还可以再缩小一点：[2, sqrt(n)]内所有的素数</li></ol>	
试除法判断素数的代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211127210953.png" />	
埃式筛法求素数的原理？	《算法 - 数学 - 数论》	<ol><li>埃式筛法可以快速找到[2, n]内所有的素数，操作步骤如下</li><li>输出最小的素数2，然后筛掉2的倍数，剩下{3, 5, 7, 9, 11...}</li><li>输出最小的素数3，然后筛掉3的倍数，剩下{5, 7, 11, 13...}</li><li>继续以上步骤，直到队列为空</li><li>用来做筛除的数，最多到sqrt(n)就可以了，因为：非素数k必定可以被一个小于等于sqrt(k)的素数整除</li></ol>	
埃式筛法求素数代码实现？	《算法 - 数学 - 数论》	<img src="https://gitee.com/mr-peng2333/image-storage/raw/master/img/20211127215952.png" />	
Σ 数论	《算法 - 数学》	<ol><li>取模操作满足的性质？</li><li>快速幂原理？</li><li>快速幂代码实现？</li><li>矩阵快速幂代码实现？</li><li>求最大公约数代码实现？</li><li>求最小公倍数代码实现？</li><li>方程ax + by = n（a、b、n是整数）什么时候有整数解？</li><li>方程ax + by = n（a、b、n是整数）的通解（已知方程的一个解(x0, y0)）？</li><li>扩展欧几里得解决的问题？</li><li>扩展欧几里得求解过程？</li><li>扩展欧几里得代码实现？</li><li>求方程ax + by = n 的一个整数解的求解过程？</li><li>同余的概念？</li><li>一元线性同余方程的概念？</li><li>一元线性同余方程ax ≡ b (mod m)的求解思路？</li><li>逆元的概念？</li><li>求解逆元的思路？</li><li>求逆元的代码实现？</li><li>逆元在除法取模中的应用？</li><li>逆元在一元线性同余方程求解中的应用？</li><li>逆元在求解二元一次方程中的应用？</li><li>试除法判断素数的概念？</li><li>试除法判断素数的代码实现？</li><li>埃式筛法求素数的原理？</li><li>埃式筛法求素数代码实现？</li></ol>	
Σ 数学	《算法 - 数学》	<ol><li>高精度计算</li><li>数论</li></ol>	
Σ 算法	《算法》	<ol><li>动态规划</li><li>数学</li></ol>	
